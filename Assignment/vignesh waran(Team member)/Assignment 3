{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "13a3794d",
   "metadata": {},
   "source": [
    "# Exercise\n",
    "\n",
    "Answer the questions or complete the tasks outluined in bold below. use the specific method described if applicable.\n",
    "\n",
    "**What is 7 to the power of 4 ?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "620a3af2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2401"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "7**4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e632188b",
   "metadata": {},
   "source": [
    "**Split this String**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "838a4566",
   "metadata": {},
   "source": [
    "    s = \"Hi there Sam!\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dee3dc9",
   "metadata": {},
   "source": [
    "### into a list. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7c0908af",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = 'Hi there Sam!'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d75c14a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Hi', 'there', 'Sam!']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s.split()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c736fe45",
   "metadata": {},
   "source": [
    "**Given the Variables:**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7af7074a",
   "metadata": {},
   "source": [
    "    planet = \"Earth\"\n",
    "    diameter = 12742"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd49a69f",
   "metadata": {},
   "source": [
    "**Use.format() to print the following string**\n",
    "\n",
    "    The diameter of Earth is 12742 kilometers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "11049745",
   "metadata": {},
   "outputs": [],
   "source": [
    "planet = \"Earth\"\n",
    "diameter = 12742"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "583156dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The diameter of Earth is  12742 kilometers. \n"
     ]
    }
   ],
   "source": [
    "print(\"The diameter of {} is  {} kilometers. \".format (planet,diameter))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc70089f",
   "metadata": {},
   "source": [
    "**Given this nested list, use indexing to grab the word \"hello\"**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "368e0a64",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = [1,2,[3,4],[5,[100,200,['hello']],23,11],1,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9f447aba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'hello'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lst[3][1][2][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6f45d25",
   "metadata": {},
   "source": [
    "**Given this nest dictionary grab the word \"hello\". Be prepare,this will be annoying/tricky**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "598d5838",
   "metadata": {},
   "outputs": [],
   "source": [
    "d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6d00d493",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'hello'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d['k1'][3]['tricky'][3]['target'][3]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be80ce78",
   "metadata": {},
   "source": [
    "**What is the main difference between a tuple and a list ?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cd2f6067",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tuple is immutable where as list is mutable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18479537",
   "metadata": {},
   "source": [
    "**Create a function that grabs the email website domain from a string in the form:**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "809393ed",
   "metadata": {},
   "source": [
    "        user@domain.com"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "464655dd",
   "metadata": {},
   "source": [
    "### So for example, passing \"user@domain.com\" would return: domain.com "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "498b675e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def domainGet(email) :\n",
    "    return email.split('@')[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e9cfdc04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'domain.com'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "domainGet('user@domain.com')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66c27a32",
   "metadata": {},
   "source": [
    "**Create a basic function that returns True if the word 'dog' is contained in the input string. Don't worry about edge cases like a punctuations being attached to the word dog.but do account for capitilazation** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "55bf5462",
   "metadata": {},
   "outputs": [],
   "source": [
    "def findDog(st):\n",
    "    return 'dog' in st.lower().split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f4e41577",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "findDog('Is there a dog here?')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d5b1f0e",
   "metadata": {},
   "source": [
    "**Create a function that counts the number of times the word \"dog\" occurs in a string.Again ignore edge cases.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "eb0948f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def countDog(st):\n",
    "    count = 0\n",
    "    for word in st.lower().split():\n",
    "        if word== 'dog':\n",
    "            count += 1\n",
    "    return count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1e897e57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countDog('This dog runs faster than the other dog dude')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3320e52a",
   "metadata": {},
   "source": [
    "# problem"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "080e8e9c",
   "metadata": {},
   "source": [
    "**You are driving a little too fast, and a police officer stops you.Write a function to return one of 3 possible return: \"No Tickets\",\"Small Ticket\",or \"Big Tickets\".if your speed is 60 or less, the result is \"No Ticket\".If the speed is between 61 and 80 inclusive, the result is \"Small Ticket\". if speed is 81 more,the result is \"Big Ticket\".Unless it is your birthday(encoded as a boolean value in the parameters of the function)--on your birthday.your speed can be 5 higher in all cases.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5e13b7ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "def caught_speeding(speed, is_birthday):\n",
    "    \n",
    "    if is_birthday:\n",
    "        speeding = speed - 5\n",
    "    else:\n",
    "        speeding = speed\n",
    "    if speeding > 80:\n",
    "        return 'Big Ticket'\n",
    "    elif speeding > 60:\n",
    "        return 'small Ticket'\n",
    "    else:\n",
    "        return 'No Ticket'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "90b5311c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Big Ticket'"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "caught_speeding(81,False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3ce9e0a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'small Ticket'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "caught_speeding(81,True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ff99b97",
   "metadata": {},
   "source": [
    "**Create an employee list with basic salary value(at least 5 values for 5 employees)and using a for loop retreive each employee salaryand calculate total salary expenditure**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "20951a2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50000\n",
      "60000\n",
      "55000\n",
      "35000\n",
      "40000\n",
      "Total Salary: 240000\n"
     ]
    }
   ],
   "source": [
    "l = [50000,60000,55000,35000,40000]\n",
    "tot_salary = 0\n",
    "for salary in l:\n",
    "    tot_salary += salary\n",
    "    print(salary)\n",
    "print('Total Salary:',tot_salary)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd5333b7",
   "metadata": {},
   "source": [
    "Create two dictionaries in python:\n",
    "\n",
    "First one to contain fields as Empid,Empname,Basicpay\n",
    "\n",
    "Second dicyionary to contain fields as DeptName,DeptId.\n",
    "\n",
    "combaine both  dictionaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "430a4c77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Empid': 1, 'Empname': 'Any', 'Basicpay': 2000, 'DeptName': 'CSE', 'DeptID': 'IT27'}\n"
     ]
    }
   ],
   "source": [
    "d1={'Empid':1,'Empname':'Any','Basicpay':2000}\n",
    "d2={'DeptName':'CSE','DeptID':'IT27'}\n",
    "d3=d1 | d2\n",
    "print(d3)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
